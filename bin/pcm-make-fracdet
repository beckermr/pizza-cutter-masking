#!/usr/bin/env python


def main(
    combined_file, nside, output_file, use_parquet
):
    import numpy as np
    from pizza_cutter_masking.constants import NSIDE_COVERAGE
    import healsparse as hsp
    from tqdm import tqdm

    fracdet_map = hsp.HealSparseMap.make_empty(
        NSIDE_COVERAGE, nside, dtype=np.float64,
    )

    combined_coverage = hsp.HealSparseCoverage.read(combined_file)

    covpixels, = np.where(combined_coverage.coverage_mask)

    for covpix in tqdm(covpixels):
        combined_sub = hsp.HealSparseMap.read(combined_file, pixels=covpix)

        fracdet_sub = combined_sub.fracdet_map(nside)
        vpix = fracdet_sub.valid_pixels
        fracdet_map[vpix] = fracdet_sub[vpix]

    if use_parquet:
        format_ = "parquet"
    else:
        format_ = "fits"

    print("writing: ", output_file)
    fracdet_map.write(output_file, clobber=True, format=format_)

def get_args():
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument("--combined", required=True, help="combined file")
    parser.add_argument('--output', required=True, help='output file')

    parser.add_argument(
        '--nside',
        type=int,
        required=True,
        help='use specified nside',
    )

    parser.add_argument(
        '--use-parquet',
        action='store_true',
        help='Store output map in parquet format',
    )

    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()

    main(
        combined_file=args.combined,
        nside=args.nside,
        output_file=args.output,
        use_parquet=args.use_parquet,
    )
