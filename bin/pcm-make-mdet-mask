#!/usr/bin/env python


def main(flist, output_file, nside):
    import numpy as np
    from pizza_cutter_masking.constants import NSIDE, NSIDE_COVERAGE
    import healsparse as hsp

    if nside is None:
        nside = NSIDE

    hsp_map = hsp.HealSparseMap.make_empty(
        NSIDE_COVERAGE, nside, dtype=np.int16,
    )

    nfile = len(flist)
    for i, fname in enumerate(flist):
        print(f'{i+1}/{nfile} {fname}')

        hsp_highres = hsp.HealSparseMap.read(fname)
        if hsp_highres.nside_sparse > nside:
            hsp_lowres = hsp_highres.degrade(nside)
        else:
            hsp_lowres = hsp_highres

        valid_pix = hsp_lowres.valid_pixels
        values = hsp_lowres.get_values_pix(valid_pix)

        # 1 means OK
        # https://github.com/beckermr/pizza-cutter-metadetect/blob/main/pizza_cutter_metadetect/masks.py  # noqa
        ok = values == 1

        # we can set directly to one because the individual
        # files have unique valid pixels
        hsp_map[valid_pix[ok]] = 1

    print('writing:', output_file)
    hsp_map.write(output_file, clobber=True)


def get_args():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--flist', nargs='+',
        help='list of healsparse files for each tile',
        required=True,
    )
    parser.add_argument(
        '--output',
        help='output file',
        required=True,
    )
    parser.add_argument(
        '--nside',
        type=int,
        help='use specified nside',
    )

    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    main(
        flist=args.flist,
        output_file=args.output,
        nside=args.nside,
    )
