#!/usr/bin/env python


def main(
    footprint_file, mask_file, metadetect_file, output_file, nside, use_bool,
    use_parquet,
):
    import numpy as np
    import pizza_cutter_masking as pcm
    from pizza_cutter_masking.constants import NSIDE, NSIDE_COVERAGE
    import healsparse as hsp
    from tqdm import tqdm

    if footprint_file is None and metadetect_file is None:
        raise RuntimeError(
            "Must supply at least one of footprint or metadetect"
        )

    if nside is None:
        nside = NSIDE

    if use_bool:
        dtype = bool
        val = True
        bit_packed = True
    else:
        dtype = np.int16
        val = 1
        bit_packed = False

    if footprint_file is not None:
        print('loading footprint:', footprint_file)
        footprint = hsp.HealSparseMap.read(footprint_file)
    else:
        footprint = None

    mask_coverage = hsp.HealSparseCoverage.read(mask_file)

    if mask_coverage.nside_sparse != nside:
        raise ValueError(
            'mask nside {mask_coverage.nside_sparse} does not equal '
            'requested nside {nside}'
        )
    if mask_coverage.nside_coverage != NSIDE_COVERAGE:
        raise ValueError(
            'mask nside_coverage {mask_coverage.nside_coverage} '
            'does not equal requested nside_coverage {NSIDE_COVERAGE}'
        )

    if metadetect_file is not None:
        metadetect_coverage = hsp.HealSparseCoverage.read(metadetect_file)

        if metadetect_coverage.nside_sparse != nside:
            raise ValueError(
                'mdet nside {metadetect_coverage.nside_sparse} does not equal '
                'requested nside {nside}'
            )
        if metadetect_coverage.nside_coverage != NSIDE_COVERAGE:
            raise ValueError(
                'mdet nside_coverage {metadetect_coverage.nside_coverage} '
                'does not equal requested nside_coverage {NSIDE_COVERAGE}'
            )

    hsp_map = hsp.HealSparseMap.make_empty(
        NSIDE_COVERAGE, nside, dtype=dtype, bit_packed=bit_packed,
    )

    mask_coverage = hsp.HealSparseCoverage.read(mask_file)
    if metadetect_file is not None:
        mdet_coverage = hsp.HealSparseCoverage.read(metadetect_file)

    # If we have a footprint file, start with that.
    if footprint is not None:
        # loop over the coverage pixel sub-maps, upgrade and get the valid
        # pixels within that range.
        for covpix_map in tqdm(footprint.get_covpix_maps()):
            covpix_highres = covpix_map.upgrade(nside)

            pcm.lmc.mask_lmc(covpix_highres)

            valid_pix = covpix_highres.valid_pixels

            covpix, = np.where(covpix_map.coverage_mask)
            if mask_coverage.coverage_mask[covpix[0]]:

                mask_sub = hsp.HealSparseMap.read(mask_file, pixels=covpix)
                mask_vals = mask_sub.get_values_pix(valid_pix)
                if mask_sub.dtype == np.bool_:
                    keep = (~mask_vals)
                else:
                    keep = (mask_vals == 0)

                if (metadetect_file is not None
                        and mdet_coverage.coverage_mask[covpix[0]]):
                    metadetect_sub = hsp.HealSparseMap.read(
                        metadetect_file, pixels=covpix,
                    )
                    mdet_ok = metadetect_sub.get_values_pix(
                        valid_pix, valid_mask=True,
                    )
                    keep &= mdet_ok

                hsp_map[valid_pix[keep]] = val
            else:
                print('skipping:', covpix[0])
    else:
        # We do not have a footprint file, use metadetect instead.
        covpixels, = np.where(metadetect_coverage.coverage_mask)
        print(f"Combining {covpixels.size} coverage pixels...")
        for covpix in tqdm(covpixels):
            metadetect_sub = hsp.HealSparseMap.read(
                metadetect_file, pixels=covpix,
            )
            valid_pix = metadetect_sub.valid_pixels

            mask_sub = hsp.HealSparseMap.read(mask_file, pixels=covpix)
            mask_vals = mask_sub.get_values_pix(valid_pix)
            if mask_sub.dtype == np.bool_:
                keep = (~mask_vals)
            else:
                keep = (mask_vals == 0)

            hsp_map[valid_pix[keep]] = val

        print("Masking LMC...")
        pcm.lmc.mask_lmc(hsp_map)

    if use_parquet:
        format_ = "parquet"
    else:
        format_ = "fits"

    print('writing:', output_file)
    hsp_map.write(output_file, clobber=True, format=format_)


def get_args():
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('--footprint', help='footprint file')
    parser.add_argument('--mask', required=True, help='mask file')
    parser.add_argument('--metadetect', help='metadetect footprint file')
    parser.add_argument('--output', required=True, help='output file')

    parser.add_argument(
        '--nside',
        type=int,
        help='use specified nside',
    )

    parser.add_argument(
        '--use-bool',
        action='store_true',
        help='make a bool map rather than int16',
    )

    parser.add_argument(
        '--use-parquet',
        action='store_true',
        help='Store output map in parquet format',
    )

    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()

    main(
        footprint_file=args.footprint,
        mask_file=args.mask,
        metadetect_file=args.metadetect,
        output_file=args.output,
        nside=args.nside,
        use_bool=args.use_bool,
        use_parquet=args.use_parquet,
    )
