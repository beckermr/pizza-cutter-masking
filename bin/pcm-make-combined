#!/usr/bin/env python


def main(footprint_file, mask_file, metadetect_file, output_file):
    import numpy as np
    import pizza_cutter_masking as pcm
    from pizza_cutter_masking.constants import NSIDE, NSIDE_COVERAGE
    import healsparse as hsp
    import healpy as hp
    from tqdm import trange

    footprint = hsp.HealSparseMap.read(footprint_file)
    mask = hsp.HealSparseMap.read(mask_file)

    if metadetect_file is not None:
        metadetect = hsp.HealSparseMap.read(metadetect_file)
    else:
        metadetect = None

    hsp_map = hsp.HealSparseMap.make_empty(
        NSIDE_COVERAGE, NSIDE, dtype=np.int16,
    )

    # work in chunks to reduce memory usage
    npix = hp.nside2npix(pcm.constants.NSIDE)
    chunksize = 1_000_000
    nchunks = npix // chunksize
    if npix % chunksize != 0:
        nchunks += 1

    for ipix in trange(nchunks):
        start = ipix * chunksize
        end = (ipix+1) * chunksize
        if end > npix:
            end = npix

        pixels = np.arange(start, end)

        ra, dec = hp.pix2ang(NSIDE, pixels, lonlat=True)

        keep = pcm.apply_masks.apply_masks(
            ra=ra, dec=dec,
            footprint=footprint, mask=mask, metadetect=metadetect,
        )
        hsp_map[pixels[keep]] = 1

    print('writing:', output_file)
    hsp_map.write(output_file, clobber=True)


def get_args():
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('--footprint', required=True, help='footprint file')
    parser.add_argument('--mask', required=True, help='mask file')
    parser.add_argument('--metadetect', help='metadetect footprint file')
    parser.add_argument('--output', required=True, help='output file')

    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()

    main(
        footprint_file=args.footprint,
        mask_file=args.mask,
        metadetect_file=args.metadetect,
        output_file=args.output,
    )
