#!/usr/bin/env python

def main(args):
    import numpy as np
    import healsparse
    import matplotlib.pyplot as mplt
    import skyproj
    import matplotlib

    if args.cmap is None:
        cmap_seed = 8811
        rng = np.random.RandomState(cmap_seed)
        cmap = matplotlib.colors.ListedColormap(rng.random(size=(256,3)))
    else:
        cmap = args.cmap

    show = args.show
    if not show and args.output is None:
        show = True

    kw = {}

    if args.lon_range is not None:
        kw['lon_range'] = get_csv(args.lon_range)

    if args.lat_range is not None:
        kw['lat_range'] = get_csv(args.lat_range)

    print('reading', args.fname)
    hmap = healsparse.HealSparseMap.read(args.fname)

    if args.val_range is not None:
        val_range = get_csv(args.val_range)
        kw['vmin'] = val_range[0]
        kw['vmax'] = val_range[1]
    else:
        valid_pixels = hmap.valid_pixels
        kw['vmin'] = hmap[valid_pixels].min()
        kw['vmax'] = hmap[valid_pixels].max()

    print('plotting')
    fig, ax = mplt.subplots(figsize=(10, 6))

    m = skyproj.McBrydeSkyproj(ax=ax, autorescale=args.autorescale)
    _ = m.draw_hspmap(hmap, cmap=cmap, **kw)

    if args.output is not None:
        print('writing:', args.output)
        fig.savefig(args.output)

    if show:
        mplt.show()


def get_csv(values):
    return [float(val) for val in values.split(',')]


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('fname', help='input healsparse file')
    parser.add_argument(
        '--lon-range', help='as csv, e.g. 50,60'
    )
    parser.add_argument(
        '--lat-range', help='as csv, e.g. -5,5'
    )
    parser.add_argument(
        '--val-range', help='map value range as csv, e.g. 0.9,1.1'
    )
    parser.add_argument('--output',
                        help='optional output file')

    parser.add_argument('--cmap', help='specify a color map; default is random')
    parser.add_argument('--autorescale', action='store_true',
                        help='auto rescale color range when zooming')
    parser.add_argument('--show', action='store_true',
                        help='show on the screen')
    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    main(args)
