#!/usr/bin/env python

def main(args):
    import numpy as np
    import healsparse
    import matplotlib.pyplot as mplt
    import skyproj
    import matplotlib

    if args.cmap is None:
        cmap_seed = 8811
        rng = np.random.RandomState(cmap_seed)
        cmap = matplotlib.colors.ListedColormap(rng.random(size=(256, 3)))
    else:
        cmap = args.cmap

    show = args.show
    if not show and args.output is None:
        show = True

    kw = {}

    if args.lon_range is not None:
        kw['lon_range'] = args.lon_range

    if args.lat_range is not None:
        kw['lat_range'] = args.lat_range

    print('reading', args.fname)
    hmap = healsparse.HealSparseMap.read(args.fname)

    if args.val_range is not None:
        val_range = args.val_range
        kw['vmin'] = val_range[0]
        kw['vmax'] = val_range[1]
    else:
        valid_pixels = hmap.valid_pixels
        kw['vmin'] = hmap[valid_pixels].min()
        kw['vmax'] = hmap[valid_pixels].max()

    print('plotting')
    fig, ax = mplt.subplots(figsize=(10, 6))

    m = skyproj.McBrydeSkyproj(ax=ax, autorescale=args.autorescale)
    _ = m.draw_hspmap(hmap, cmap=cmap, **kw)

    if args.cat is not None:
        oplot_cat(m, args)

    if args.output is not None:
        print('writing:', args.output)
        fig.savefig(args.output, dpi=args.dpi)
        if '.pdf' in args.output:
            png = args.output.replace('.pdf', '.png')
            print('writing:', png)
            fig.savefig(png, dpi=args.dpi)

    if show:
        mplt.show()


def oplot_cat(ax, args):
    import numpy as np
    import h5py

    print('loading:', args.cat)
    hfile = h5py.File(args.cat)

    ra = hfile['/mdet/noshear']['ra'][:]
    dec = hfile['/mdet/noshear']['dec'][:]

    if args.lon_range is not None:
        w, = np.where(
            (ra > args.lon_range[0])
            & (ra < args.lon_range[1])
            & (dec > args.lat_range[0])
            & (dec < args.lat_range[1])
        )
        print(f'kept: {w.size}/{ra.size}')
        ra = ra[w]
        dec = dec[w]

    ax.scatter(ra, dec, c='black', marker='o', s=4)


def get_csv(values):
    return [float(val) for val in values.split(',')]


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('fname', help='input healsparse file')
    parser.add_argument('--cat', help='h5 file with positions to overplot')
    parser.add_argument(
        '--lon-range', type=float, nargs=2, help='e.g. 50 60'
    )
    parser.add_argument(
        '--lat-range', type=float, nargs=2, help='e.g. -10 0'
    )
    parser.add_argument(
        '--val-range', type=float, nargs=2,
        help='map value range e.g. 0.9 1.1'
    )
    parser.add_argument('--output',
                        help='optional output file')
    parser.add_argument('--dpi', type=int,
                        help='optional dpi for bitmap files')

    parser.add_argument('--cmap',
                        help='specify a color map; default is random')
    parser.add_argument('--autorescale', action='store_true',
                        help='auto rescale color range when zooming')
    parser.add_argument('--show', action='store_true',
                        help='show on the screen')
    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    main(args)
